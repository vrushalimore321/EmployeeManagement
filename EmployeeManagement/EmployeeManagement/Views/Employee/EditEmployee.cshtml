@model EmployeeModels.ViewModel.EmployeeDetailView
@{
    ViewBag.Title = "EditEmployee";
}

<h2>EditEmployee</h2>

@using (Html.BeginForm())
{
   @*  @Html.AntiForgeryToken() *@

    <div class="form-horizontal">
       
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2", id = "nameLabel" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", id = "nameInput" } })
            </div>
        </div>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var nameInput = document.getElementById('nameInput');
                var nameLabel = document.getElementById('nameLabel');

                nameInput.addEventListener('input', function () {
                    var name = this.value.trim();
                    if (name === '') {
                        nameLabel.classList.add('text-danger');
                        nameLabel.textContent = 'Please enter the name.';
                    } else {
                        nameLabel.classList.remove('text-danger');
                        nameLabel.textContent = '';
                    }
                });
            });
        </script>


        <div class="form-group">
            <div style="width: 83%;">
                @Html.LabelFor(model => model.DesignationId, "Designation", htmlAttributes: new { @class = "control-label col-md-2" })
                @Html.DropDownListFor(model => model.DesignationId, ViewBag.Designations as SelectList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DesignationId)
            </div>
            @Html.ValidationMessageFor(model => model.DesignationId)
        </div>



        @* <div class="form-group">
            @Html.LabelFor(model => model.DesignationId, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.DropDownListFor(model => model.DesignationId, ViewBag.Designations as SelectList, new { @class = "form-control", id = "designationInput" })
            </div>
            <div>
                <span id="designationError" class="text-danger" style="display:none;">Please select a designation.</span>
            </div>
        </div>

        <script>
            $(document).ready(function () {
                $('#designationInput').on('change', function () {
                    var designationId = $(this).val().trim();
                    if (designationId === '' || designationId === '0') {
                        $('#designationError').show();
                    } else {
                        $('#designationError').hide();
                    }
                });
            });
        </script>
 *@


       @*  <div class="form-group">
            @Html.LabelFor(model => model.ProfilePicture, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <!-- Display current profile picture name -->
                @Html.DisplayFor(model => model.ProfilePicture)
                <!-- Input for selecting a profile picture -->
                <input type="file" name="ProfilePicture" id="fileName" onchange="displayFileName(this)" class="form-control" , value="@Model.ProfilePicture", accept="image/gif,image/jpg,image/jpeg,image/png" />
                @Html.ValidationMessageFor(model => model.ProfilePicture, "", new { @class = "text-danger" })
            </div>
        </div> *@


       <div class="form-group">  
            @Html.LabelFor(model => model.ProfilePicture, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="ProfilePicture" id="fileName" onchange="previewImage()"  class="form-control" accept="image/gif,image/jpg,image/jpeg,image/png" />
                <br />
                <img id="imagePreview" src="/Images/@Model.ProfilePicture" alt="Preview" style="max-width: 200px; max-height: 200px;@(string.IsNullOrEmpty(Model.ProfilePicture) ? "display: none;" : "")" />
                <input type="hidden" id="currentProfilePicture" value="@Model.ProfilePicture" />
                <script type="text/javascript">
                    var currentProfilePictureUrl = "@Url.Content("~/Images/" + Model.ProfilePicture)";

                    function previewImage() 
                    {
                        var fileInput = document.getElementById('fileName');
                        var imagePreview = document.getElementById('imagePreview');
                         var currentProfilePicture = document.getElementById('currentProfilePicture');

                        if (fileInput.files && fileInput.files[0]) {
                            var reader = new FileReader();

                            reader.onload = function (e) {
                                imagePreview.src = e.target.result;
                                imagePreview.style.display = 'block';
                            };

                            reader.readAsDataURL(fileInput.files[0]);
                        }
                    }
                    function validateFileType()
                    {
                        var fileName = document.getElementById("fileName").value;
                        var idxDot = fileName.lastIndexOf(".") + 1;
                        var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
                        if (extFile == "jpg" || extFile == "jpeg" || extFile == "png") {
                            // Valid file type, do nothing
                        } else {
                            alert("Only jpg/jpeg and png files are allowed!");
                        }
                    }
                </script>
                 @Html.ValidationMessageFor(model => model.ProfilePicture, "", new { @class = "text-danger" }) 
            </div>
        </div> 
            


      @*   <div class="form-group">******************************************************************************************
            @Html.LabelFor(model => model.ProfilePicture, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="ProfilePicture" id="fileName" onchange="previewImage()" class="form-control" accept="image/gif,image/jpg,image/jpeg,image/png"  />
                <br />
                <img id="imagePreview" src="@Url.Content("~/Images/" + Model.ProfilePicture)" alt="Preview" style="max-width: 200px; max-height: 200px;@(string.IsNullOrEmpty(Model.ProfilePicture) ? "display: none;" : "")" />


                <script type="text/javascript">
                    function previewImage() {
                        console.log("previewImage function called");
                        var fileInput = document.getElementById('fileName');
                        var imagePreview = document.getElementById('imagePreview');
                        var originalProfilePicture = document.getElementById('originalProfilePicture').value; // Get the original profile picture URL

                        if (fileInput.files && fileInput.files[0]) {
                            var reader = new FileReader();

                            reader.onload = function (e) {
                                imagePreview.src = e.target.result;
                                imagePreview.style.display = 'block';
                            };

                            reader.readAsDataURL(fileInput.files[0]);
                        } else {
                            // If no file selected, show the original profile picture
                            imagePreview.src = "@Url.Content("~/Images/" + Model.ProfilePicture)";
                            imagePreview.style.display = 'block';
                        }
                    }
                </script>
                @Html.ValidationMessageFor(model => model.ProfilePicture, "", new { @class = "text-danger" })
            </div>
        </div> *@







        @* <div class="form-group">
            @Html.LabelFor(model => model.ProfilePicture, htmlAttributes: new { @class = "control-label col-md-2", id = "profilePictureLabel" })
            <div class="col-md-10">
                <input type="file" name="ProfilePicture" id="fileName" onchange="displaySelectedFileName(this)" required class="form-control" accept="image/gif,image/jpg,image/jpeg,image/png" />
                <script type="text/javascript">
                    function displaySelectedFileName(input) {
                        var selectedFileName = input.files[0].name;
                        document.getElementById('profilePictureLabel').textContent = 'Profile Picture: ' + selectedFileName;
                    }
                </script>
                @Html.ValidationMessageFor(model => model.ProfilePicture, "", new { @class = "text-danger" })
            </div>
        </div> *@





        <div class="form-group">
            @Html.LabelFor(model => model.Salary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}
  <div>
    @Html.ActionLink("Back to List", "GetAll")
  </div>